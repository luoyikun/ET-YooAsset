//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace ET.Editor.LuBanSample
{

public sealed partial class LuBanSampleConfig :  Bright.Config.EditorBeanBase 
{
    public LuBanSampleConfig()
    {
            Name = "";
            Desc = "";
            Quality = item.EQuality.WHITE;
            ExchangeStream = new item.ItemExchange();
            ExchangeList = new System.Collections.Generic.List<item.ItemExchange>();
            ExchangeColumn = new item.ItemExchange();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Id = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Name = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["desc"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  Desc = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["price"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  Price = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["upgrade_to_item_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  UpgradeToItemId = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["expire_time"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  ExpireTime = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["batch_useable"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  BatchUseable = _fieldJson;
            }
        }
        
        { 
            var _fieldJson = _json["quality"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { Quality = (item.EQuality)System.Enum.Parse(typeof(item.EQuality), _fieldJson); } else if(_fieldJson.IsNumber) { Quality = (item.EQuality)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
        }
        
        { 
            var _fieldJson = _json["exchange_stream"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  ExchangeStream = item.ItemExchange.LoadJsonItemExchange(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["exchange_list"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } ExchangeList = new System.Collections.Generic.List<item.ItemExchange>(); foreach(JSONNode __e in _fieldJson.Children) { item.ItemExchange __v;  if(!__e.IsObject) { throw new SerializationException(); }  __v = item.ItemExchange.LoadJsonItemExchange(__e);  ExchangeList.Add(__v); }  
            }
        }
        
        { 
            var _fieldJson = _json["exchange_column"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  ExchangeColumn = item.ItemExchange.LoadJsonItemExchange(_fieldJson);
            }
        }
        
        { 
            var _fieldJson = _json["UnitType"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  UnitType = _fieldJson;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(Id);
        }
        {

            if (Name == null) { throw new System.ArgumentNullException(); }
            _json["name"] = new JSONString(Name);
        }
        {

            if (Desc == null) { throw new System.ArgumentNullException(); }
            _json["desc"] = new JSONString(Desc);
        }
        {
            _json["price"] = new JSONNumber(Price);
        }
        {
            _json["upgrade_to_item_id"] = new JSONNumber(UpgradeToItemId);
        }

        if (ExpireTime != null)
        {
            _json["expire_time"] = new JSONString(ExpireTime);
        }
        {
            _json["batch_useable"] = new JSONBool(BatchUseable);
        }
        {
            _json["quality"] = new JSONNumber((int)Quality);
        }
        {

            if (ExchangeStream == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  item.ItemExchange.SaveJsonItemExchange(ExchangeStream, __bjson); _json["exchange_stream"] = __bjson; }
        }
        {

            if (ExchangeList == null) { throw new System.ArgumentNullException(); }
            { var __cjson = new JSONArray(); foreach(var _e in ExchangeList) { { var __bjson = new JSONObject();  item.ItemExchange.SaveJsonItemExchange(_e, __bjson); __cjson["null"] = __bjson; } } _json["exchange_list"] = __cjson; }
        }
        {

            if (ExchangeColumn == null) { throw new System.ArgumentNullException(); }
            { var __bjson = new JSONObject();  item.ItemExchange.SaveJsonItemExchange(ExchangeColumn, __bjson); _json["exchange_column"] = __bjson; }
        }
        {
            _json["UnitType"] = new JSONNumber(UnitType);
        }
    }

    public static LuBanSampleConfig LoadJsonLuBanSampleConfig(SimpleJSON.JSONNode _json)
    {
        LuBanSampleConfig obj = new LuBanSample.LuBanSampleConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonLuBanSampleConfig(LuBanSampleConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 这是id
    /// </summary>
    public int Id { get; set; }

    /// <summary>
    /// 名字
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; set; }

    /// <summary>
    /// 价格
    /// </summary>
    public int Price { get; set; }

    /// <summary>
    /// 引用当前表
    /// </summary>
    public int UpgradeToItemId { get; set; }

    /// <summary>
    /// 过期时间
    /// </summary>
    public string ExpireTime { get; set; }

    /// <summary>
    /// 能否批量使用
    /// </summary>
    public bool BatchUseable { get; set; }

    /// <summary>
    /// 品质
    /// </summary>
    public item.EQuality Quality { get; set; }

    /// <summary>
    /// 道具兑换配置
    /// </summary>
    public item.ItemExchange ExchangeStream { get; set; }

    public System.Collections.Generic.List<item.ItemExchange> ExchangeList { get; set; }

    /// <summary>
    /// 道具兑换配置
    /// </summary>
    public item.ItemExchange ExchangeColumn { get; set; }

    /// <summary>
    /// Unit类型
    /// </summary>
    public int UnitType { get; set; }

}
}
